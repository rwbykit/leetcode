package leetcode;

import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Deque;

/**
 * 
 * <p>给定一个数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口 k 内的数字。滑动窗口每次只向右移动一位。
 * 返回滑动窗口最大值。</p>
 * 
 * <p><strong>示例:</strong></br>
 * </br>
 * 输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3</br>
 * 输出: [3,3,5,5,6,7] </br>
 * 解释: </br>
 * </br>
 *   滑动窗口的位置                最大值</br>
 * ---------------               -----</br>
 * [1  3  -1] -3  5  3  6  7       3</br>
 *  1 [3  -1  -3] 5  3  6  7       3</br>
 *  1  3 [-1  -3  5] 3  6  7       5</br>
 *  1  3  -1 [-3  5  3] 6  7       5</br>
 *  1  3  -1  -3 [5  3  6] 7       6</br>
 *  1  3  -1  -3  5 [3  6  7]      7</br>
 * </p>
 * 
 * <p><strong>注意：</strong></br>
 * 你可以假设 k 总是有效的，1 ≤ k ≤ 输入数组的大小，且输入数组不为空。</p>
 * 
 * <p><strong>进阶：</strong></br>
 * 你能在线性时间复杂度内解决此题吗？</p>
 * 
 * @author Cytus_
 * @since 2018年9月26日 下午4:26:34
 * @version 1.0
 */
public class _0239SlidingWindowMaximum {
	
	public static void main(String[] args) {
		long start = System.currentTimeMillis();
		int[] nums = {-301,7825,3986,6586,4837,9414,8005,803,5827,-93,7789,2217,4263,3382,2158,7877,2616,3642,-371,-33,2420,5665,9379,6472,4642,9407,3543,9194,2930,979,972,2388,8031,4973,1987,6109,-863,4697,8852,6415,2413,1029,1927,3709,8115,2661,982,9091,2328,6507,1786,252,-394,8773,5514,4036,9037,3379,3677,3877,3907,9207,9847,3582,8360,8654,5541,5621,2117,7440,3851,6462,1548,7652,7005,329,6146,3890,8342,7518,1497,-124,7150,-631,1786,2786,-697,3791,-936,4801,1315,637,141,3018,5236,-789,1681,3144,2223,4088,9558,6806,2889,5380,3352,6259,4056,2184,5925,8329,3764,7871,4621,1062,-299,4586,9582,1878,6959,6679,7734,9915,8461,2243,588,9713,-306,-75,3562,3082,9669,4856,700,3388,3354,4503,-387,-787,6008,9764,111,6941,3992,4024,4515,41,4596,6967,4401,3593,5503,5842,6841,3473,7229,6038,3459,9641,6214,103,-42,4567,7508,-189,5283,-570,-772,7824,5708,3094,228,2439,7586,3611,3447,9185,7974,2712,9402,8514,5934,5079,3163,2499,9060,1751,707,8224,1189,3713,3042,8402,9651,-789,192,346,1739,-841,81,7877,2131,1647,3258,196,1640,8051,1761,5194,5601,-614,2266,857,4815,169,7533,717,2810,1831,2041,8658,5273,6607,9981,5263,8020,2949,6040,2890,6904,5038,6224,9458,9619,-231,3199,8134,9363,7695,9748,5410,3177,5034,1728,5371,6126,2136,4099,2045,7649,8591,-357,748,-762,2636,-492,3370,8720,5158,-849,3903,-534,705,6462,-245,6643,2503,5259,9091,-13,7210,2836,6584,8191,579,1055,6031,6621,2954,799,9980,-418,3941,194,937,6885,-203,9164,1009,1425,4368,555,3010,687,2789,6280,530,3441,9278,4019,8790,8835,9113,6841,-687,5012,2764,4509,2554,9826,-496,9926,4012,9765,2843,8015,6455,9053,3598,2271,1490,7872,2113,7523,5268,6793,7763,7902,167,9616,4122,7222,3239,3169,5464,422,7907,60,16,8997,5753,4263,3992,9157,487,1935,34,4666,2683,2905,4379,8309,-338,9438,3620,7391,8725,6145,3882,7707,1572,1061,1422,8491,-641,3396,7138,1193,5976,3236,-22,4250,7326,454,3447,2404,2990,6461,2049,4606,3178,8459,-791,7957,1233,5241,5296,8132,3536,5930,8141,9700,3540,4989,7362,561,2612,6402,-17,5574,2480,8838,8069,4011,-189,2241,5188,1299,1154,8762,7478,350,759,9950,832,2955,9375,551,4060,3855,3398,7462,7004,-835,7777,6031,8710,9668,7057,1290,9434,2348,5496,8220,5595,9022,5526,-746,9991,5760,1324,8454,4168,-351,9319,232,7612,388,7270,1613,1712,6119,1204,8974,3212,582,6009,7725,3206,-95,7236,1087,8793,6188,3410,550,887,-777,6335,-162,917,4624,7013,-783,4777,3534,2003,7275,5321,2562,8421,9356,762,1419,3044,1562,-586,2049,7191,156,1273,8417,2554,6869,6927,636,3822,6935,874,8592,8090,4879,6986,-982,1406,5068,8926,2255,280,9993,-151,-489,5233,1295,5656,1444,3928,3262,2265,4446,2075,7735,8584,3102,291,1194,356,9985,2061,3591,5478,3881,4618,4055,6133,5494,5950,4198,5561,8690,4358,-270,8188,-894,3528,6157,2053,1810,7054,7369,9100,4409,8715,2564,8270,8252,8338,970,269,1972,-723,8361,9694,7474,6678,809,-549,9744,1855,346,2098,194,415,9529,5875,1561,4090,2146,9974,3856,9822,5001,229,-795,4826,4614,-907,4131,4948,7748,2387,4042,1926,2090,7455,2397,2404,6787,2205,6161,3166,-620,8840,4096,3282,5335,6908,5934,6475,5265,2541,9437,8453,9986,3735,-405,376,4228,4767,-257,8723,5238,2177,8439,-814,8445,1797,2040,5102,9878,4530,8377,8049,6184,3068,4928,2899,1782,5704,9338,-988,5582,8482,6306,8592,8977,830,9204,7252,419,981,9772,953,6926,2664,9337,-187,800,7674,4584,-1,6984,5482,9075,5842,5403,397,569,5797,5070,-460,9807,-141,8447,11,627,-42,476,9074,3381,9522,2726,6040,-924,3687,1377,7679,3500,3267,5645,5701,4633,2052,3946,1093,821,879,4859,1872,6438,3854,5473,3172,7304,7684,7186,5103,4447,2377,620,7123,6419,7651,9122,9637,-269,9817,1426,2523,1032,253,2759,6418,9400,7889,1698,9150,8258,9531,3453,4328,5241,6801,2140,3503,3225,2189,686,3249,6141,2966,6923,1716,2389,3950,7565,6841,5697,1247,-311,7423,1054,1468,2699,420,5954,3350,9669,4626,6344,8712,-208,4903,5236,-528,1369,3680,5287,4090,3251,9094,-546,842,9758,3773,6702,2831,7324,4929,4812,8242,4218,9279,1557,7184,4779,1752,1960,1728,8407,9211,2557,9393,7017,9536,-639,7094,9742,1145,5168,217,830,3157,8087,1878,2305,4437,5734,6783,6655,190,5997,1655,7094,5053,6857,9779,8370,493,-398,9769,4658,3104,3292,5726,5466,7269,3322,6268,1528,146,1069,4602,1260,3377,9663,6752,4712,-427,2104,562,4136,4049,8557,4671,7279,7586,2435,6596,7134,5069,5855,9415,8887,7676,2887,1832,759,1661,2301,2571,3566,8693,2845,1342,7276,9598,2047,8167,5910,8900,7912,1865,4061,-155,5975,3043,2899,4284,6940,-658,634,539,6873,7275,6672,9740,8598,34,5813,7949,1724,4126,8746,212,3047,7821,319,-279,-962,965,3321,3147,1499,1384,3258,6126,9179,9162,4454,9932,422,4602,4225,139,5680,5297,6969,3484,2385,585,7212,9981,9846,6445,9539,2765,-386,-10,9638,-652,8797,-95,2977,1885,9354,656,-802,4154,887,647,9039,446,3689,-687,7864,9260,9468,581,7948,1344,4913,2244,6878,-280,9976,4944,558,6697,-701,6886,1000,-368,3484,3670,4968,9886,2855,8888,4621,6822,8758,1048,2659,8846,288,8269,3243,2181,9208,9550,5146,6412,6085,694,3246,-856,1081,5906,8218,4031,-354,9010,9968,5979,4820,704,5312,-935,8446,7174,6735,1727,4896,8507,2515,837,2595,-428,5010,6031,3399,2141,3522,2237,3556,-130,4772,7680,878,9520,2236,7761,8743,1262,2590,3847,6879,1540,4410,2996,-400,824,8924,2882,4984,7209,7178,3093,3830,-145,4707,293,4136,2772,9816,9370,270,7991,6629,5899,1063,5930,8270,7276,877,8255,7592,5917,9308,5151,4433,4179,4920,9373,9054,4798,9454,8653,3342,2073,4351,8026,7261,4443,4735,933,6206,154,-925,2288,745,490,8671,1401,3846,4737,2599,4994,2905,2771,2527,6387,1227,6144,392,2289,4933,6475,5730,-619,678,6196,9095,5124,5386,8630,-245,763,-408,3130,3826,-367,7377,9120,8058,7370,7020,672,5273,9005,6191,9181,6893,-334,2575,404,7202,68,3507,4910,8258,7424,8172,881,9347,4126,9157,8947,1821,3226,4979,3582,4274,9134,2701,-688,3313,-308,1549,5821,2045,319,8982,4397,5355,9299,695,4269,5071,5913,3385,8948,4675,1233,795,7923,1057,7612,-378,2129,4790,3501,4283,2073,-753,3711,7044,8596,926,485,-506,3699,5512,6307,9488,7543,3026,-373,1345,8065,3093,3712,1485,4060,3510,2678,-835,4487,4446,4511,-67,4546,5858,4395,-157,4533,6209,8220,2731,6131,4683,844,-645,6316,6071,2169,8628,9229,7706,7785,885,3586,8070,1237,7477,-673,1227,3341,3738,5559,228,91,2221,-535,6019,-116,1662,4163,4276,4430,6188,3865,7268,3745,7258,2979,654,3966,5987,-354,-918,7644,5069,7050,7662,9708,5030,5707,4626,2390,6628,8271,1302,8515,5422,2572,4934,-885,5277,230,4434,8858,9608,9009,8510,9137,-898,9423,4512,8935,8005,1772,7894,5085,1563,-122,-673,6233,-389,9192,3895,747,5297,1031,890,761,3834,-422,7873,4145,7939,9944,6935,7730,8129,366,9335,2132,2131,1712,264,3857,1322,9545,6729,6403,6066,1637,6736,1489,8115,584,1513,-134,1484,4706,3622,2272,2880,2207,1256,6156,6243,6140,8303,389,5951,2778,-541,603,972,5307,4988,-763,3398,9528,9138,9085,552,6577,-678,3846,258,6598,4059,5513,7342,1864,11,2557,-480,6184,5877,3389,-599,8109,3778,9271,6336,6828,-50,7243,7773,6609,2948,3131,241,1582,7089,-999,375,7360,4600,2602,2345,5130,-101,-542,4281,9888,5793,1983,8971,2572,8305,1569,9921,4028,1388,1103,1582,2693,9986,5553,7053,2580,4681,1252,5593,8402,2487,7128,7695,4479,4048,5661,9309,826,847,7994,1250,6187,2820,9263,2591,403,4517,4968,7222,7774,7875,9518,2360,9472,9897,8565,3961,6158,9876,6851,1487,8821,4476,9078,2922,8102,5175,8885,7271,9145,9344,5096,8198,6469,3137,-944,9800,1159,5854,6165,2711,1756,-834,9982,-300,7571,4836,7641,-434,1096,596,1360,3926,6664,8836,3065,6972,431,3083,7031,231,5387,8543,6840,4957,7732,760,6194,3144,6930,613,437,683,-453,3017,6373,6933,-975,8660,-324,4904,-121,999,4747,7358,7175,6593,3953,7255,2206,3217,4899,6310,3021,2603,71,2760,3410,4768,5558,9338,6853,6652,1771,7946,1112,1018,9612,1036,8456,5143,4721,5291,7058,6712,199,-452,1980,315,-679,9952,8148,802,1427,1445,5407,1821,4617,8609,5968,4489,2239,180,-435,7744,4712,6861,500,6565,5183,6082,2073,8092,8920,-532,-848,2109,3157,6933,3551,330,9638,8672,8313,3682,5318,2219,8202,1998,5685,8099,7741,-570,9189,7935,9461,8805,1815,4235,6692,951,461,4026,2932,4171,6560,9308,531,4129,859,1915,2630,1483,-238,9109,8579,6830,9578,7218,2622,8712,1204,8409,5728,787,-307,2488,5473,5539,-100,8030,7182,3245,6671,8071,806,4039,6443,8276,5555,-754,4361,8442,9788,4097,945,1954,4712,2305,127,4368,2325,2908,7714,7722,6430,6920,7555,4580,5522,6572,1251,5042,7758,5494,2630,3298,9425,6712,493,5141,8426,4242,2587,6509,727,8713,4850,1370,903,9504,8581,7325,8287,6583,1914,1929,3181};
		System.out.println(Arrays.toString(maxSlidingWindow(nums, 500)));
		System.out.println(System.currentTimeMillis() - start);
	}
	
	public static int[] maxSlidingWindow1(int[] nums, int k) {
		if (nums.length == 0) return new int[] {};
		int end = nums.length - k + 1;
		int[] rs = new int[end];
		int j = 0;
		for (int i = 0; i < end; i++) {
			int[] temps = Arrays.copyOfRange(nums, i, i + k);
			Arrays.sort(temps);
			rs[j] = (temps[temps.length - 1]);
			j++;
		}
		return rs;
    }
	
    public static int[] maxSlidingWindow(int[] nums, int k) {
        if (k <= 0) return new int[0];
        int[] max = new int[nums.length - k + 1];
        Deque<Integer> deque = new ArrayDeque<>();
        for(int i = 0; i < nums.length; i++) {
            while (!deque.isEmpty() && nums[deque.getLast()] <= nums[i]) {
                deque.removeLast();
            }
            while (!deque.isEmpty() && i - deque.getFirst() >= k) {
                deque.removeFirst();
            }
            deque.add(i);
            if (i >= k - 1) {
                max[i - k + 1] = nums[deque.getFirst()];
            }
        }
        return max;
	}

}
